{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","class","style","overflowY","scrollbarWidth","border","margin","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredrobots","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAGC,EAAc,EAAdA,KAAKC,EAAS,EAATA,MAChB,OACA,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACI,4BAAKC,GACL,2BAAIC,MCQFI,EAbA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACf,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CAAMC,IAAKJ,EAAOG,GAAGV,GAAIA,GAAIO,EAAOG,GAAGV,GAAIC,KAAMM,EAAOG,GAAGT,KAAMC,MAAOK,EAAOG,GAAGR,aCC1EU,EARC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACE,6BACM,2BAAOX,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCMlGI,G,MAVF,SAACC,GACb,OAEC,yBAAKC,MAAM,SAASC,MAAO,CAACC,UAAU,SAASC,eAAe,OAAQC,OAAO,kBAAmBC,OAAO,MAAQC,OAAO,UACjHP,EAAMQ,YC+CEC,E,kDA3CX,aAAc,IAAD,8BACZ,gBAaDC,eAAe,SAACC,GAChB,EAAKC,SAAS,CAAClB,YAAaiB,EAAME,OAAOC,SAbxC,EAAKC,MAAM,CACV3B,OAAO,GACPM,YAAY,IAJD,E,gEASO,IAAD,OAClBsB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACxB,OAAOgC,S,+BAUjH,IAAD,OAEKC,EAAeC,KAAKP,MAAM3B,OAAOmC,QAAO,SAACC,GAC9C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKX,MAAMrB,YAAY+B,kBAEjE,OAA8B,IAA3BH,KAAKP,MAAM3B,OAAOuC,OAEnB,uCAIF,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAYW,aAAc2B,KAAKZ,iBAC/B,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAUtB,OAAQiC,U,GAtChBO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9e418c4e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({id,name,email})=>{\r\n     return (\r\n\t    <div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t        <img alt='robots' src={`https://robohash.org/${id}?200*200`} />\r\n\t        <div>\r\n\t            <h2>{name}</h2>\r\n\t            <p>{email}</p>\r\n\t        </div>\r\n\r\n\t    </div>\r\n\t    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t\t\t\t\t\t\t)})\r\n\t\t\t    }\r\n\t\t   </div>\r\n\t\t\t);\r\n\t\t}\r\n\t\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n\treturn (\r\n\t\t <div>\r\n         <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search robots' onChange={searchChange} />\r\n         </div>\r\n         \r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react'\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\r\n\t\t<div class='scroll' style={{overflowY:'scroll',scrollbarWidth:'none', border:'2px solid black', margin:'5px' , height:'500px'}} >\r\n\t\t    {props.children}\r\n\t\t</div>\r\n          \r\n\r\n\t\t);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component{\r\n    \r\n\r\n    constructor(){\r\n    \tsuper();\r\n    \tthis.state={\r\n    \t\trobots:[],\r\n    \t\tsearchfield:''\r\n    \t}\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n    \tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({robots:users}))\r\n    \t\r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n   \tthis.setState({searchfield: event.target.value})\r\n   }\r\n    \r\n\r\n\r\n\trender(){\r\n\r\n        const filteredrobots=this.state.robots.filter((robot)=>{\r\n        \treturn(robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n        })\r\n        if(this.state.robots.length===0)\r\n        \treturn(\r\n        \t\t<h1>Loading</h1>\r\n        \t\t)\r\n        else{\t\t     \r\n\t\t\treturn ( \r\n\t\t\t\t    <div className='tc'>\r\n\t\t\t\t      <h1 className='f1'>Robofriends</h1>\r\n\t\t\t\t      <SearchBox  searchChange={this.onSearchChange} />\r\n\t\t\t\t      <Scroll>\r\n\t\t              <CardList robots={filteredrobots} />\r\n\t\t              </ Scroll >\r\n\t\t            </div> \r\n\t\t\t\t);\r\n\t     }\r\n      }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}